import { client } from "../db/configs/pg.config.js";
import { Response } from "../helpers/response-data.js";
import { Pagination } from "../helpers/paginations.js";

const response  = new Response()
const PAGE      = new Pagination()

export const getData = async ( request ) =>
{
    const { page, limit, search, sort } = request
    const count         = await client.query(`-- sql`)
    const total         = count.rows[0].count || 0
    const pagination    = PAGE.list({
        page: page,
        limit: limit,
        search: {
            column: [],         // search field ['name', 'id', 'etc...']
            value: search,      // search value
            condition: "or",    // or, and
            withWere: true      // include 'where'
        },
        sort: {
            column: [ ],        // sort field  ['name', 'id', 'etc...']
            value: sort         // desc, asc
        },
    })

    const query     = `select * from public.[name] ${ pagination } `

    return await client.query(query).then(
        async result => {
            const data = {
                data: result.rows,
                count: total,
                show: result.rowCount
            }
            return data
        }
    ).catch(
        reason => console.log(reason)
    )
};


export const getDataDetail = async ( { id } ) =>
{
    return await client.query(
        `select * from public.[name] where id=$1`, [id]
    ).then(
        async result => {
            return response.success(
                result.rows
            );
        }
    ).catch(
        reason => console.log(reason)
    )
};


export const insetData = async ( request ) =>
{
    const { name, email, password } = request;

    return await client.query(
        `INSERT INTO public.[name](...)`,
        [name, email, password ]
    ).then(
        result => {

            if (result.rowCount < 0)
                return result

            return response.insetSuccess({ message: "Insert Success." })
        }
    ).catch(
        reason => {

            if (reason.code == "23505")
                return response.insetFailed({ message: reason.detail });

            console.log(reason)
            return reason
        }
    )
};


export const updateData = async ( request ) =>
{
    const { a, b, c } = request;
    return await client.query(
        `UPDATE public.[name] SET ...`,
        [ a, b, c ]
    ).then(
        result => {

            if (result.rowCount < 0)
                return result

            return response.insetSuccess({ message: "Update Success." })
        }
    ).catch(
        reason => {

            if (reason.code == "23505")
                return response.insetFailed({ message: reason.detail });

            console.log(reason)
            return reason
        }
    )
};